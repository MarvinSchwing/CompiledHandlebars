// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by Pegasus 3.1.2.0
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

namespace
#line 1 "HandlebarsGrammar.peg"
           CompiledHandlebars.Compiler
#line default
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;
    using
        #line 3 "HandlebarsGrammar.peg"
       CompiledHandlebars.Compiler.AST
        #line default
        ;
    using
        #line 4 "HandlebarsGrammar.peg"
       CompiledHandlebars.Compiler.AST.Expressions
        #line default
        ;

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="HbsParser" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("Pegasus", "3.1.2.0")]
    public
    partial class
    #line 2 "HandlebarsGrammar.peg"
           HbsParser
    #line default
    {

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="HbsParser" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="HandlebarsTemplate" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        public HandlebarsTemplate Parse(string subject, string fileName = null)
        {
            var cursor = new Cursor(subject, 0, fileName);
            var result = this.Template(ref cursor);
            if (result == null)
            {
                throw ExceptionHelper(cursor, state => "Failed to parse 'Template'.");
            }
            return result.Value;
        }

        private IParseResult<
            #line 6 "HandlebarsGrammar.peg"
         HandlebarsTemplate
            #line default
            > Template(ref Cursor cursor)
        {
            IParseResult<HandlebarsTemplate> r0 = null;
            var startCursor0 = cursor;
            IParseResult<MemberExpression> r1 = null;
            var modelStart = cursor;
            r1 = this.ModelNode(ref cursor);
            var modelEnd = cursor;
            var model = ValueOrDefault(r1);
            if (r1 != null)
            {
                IParseResult<IList<ASTElementBase>> r2 = null;
                var itemsStart = cursor;
                r2 = this.Element(ref cursor);
                var itemsEnd = cursor;
                var items = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.EOF(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<HandlebarsTemplate>(startCursor0, ref cursor, state =>
                            #line 7 "HandlebarsGrammar.peg"
                                         new HandlebarsTemplate(items, model)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 9 "HandlebarsGrammar.peg"
           MemberExpression
            #line default
            > ModelNode(ref Cursor cursor)
        {
            IParseResult<MemberExpression> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.Opening(ref cursor);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.ModelKeyword(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<MemberExpression> r3 = null;
                        var valueStart = cursor;
                        r3 = this.MemberExpression(ref cursor);
                        var valueEnd = cursor;
                        var value = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            IParseResult<string> r4 = null;
                            r4 = this.Closing(ref cursor);
                            if (r4 != null)
                            {
                                r0 = this.ReturnHelper<MemberExpression>(startCursor0, ref cursor, state =>
                                    #line 10 "HandlebarsGrammar.peg"
                                                            value
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r5 = null;
                var vStart = cursor;
                r5 = this.Opening(ref cursor);
                var vEnd = cursor;
                var v = ValueOrDefault(r5);
                if (r5 != null)
                {
                    IParseResult<string> r6 = null;
                    r6 = this.ModelKeyword(ref cursor);
                    if (r6 != null)
                    {
                        IParseResult<IList<string>> r7 = null;
                        var startCursor2 = cursor;
                        var l0 = new List<string>();
                        while (true)
                        {
                            IParseResult<string> r8 = null;
                            var startCursor3 = cursor;
                            IParseResult<string> r9 = null;
                            var startCursor4 = cursor;
                            IParseResult<string> r10 = null;
                            r10 = this.Closing(ref cursor);
                            if (r10 == null)
                            {
                                r9 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                            }
                            else
                            {
                                cursor = startCursor4;
                            }
                            if (r9 != null)
                            {
                                IParseResult<string> r11 = null;
                                r11 = this.ParseAny(ref cursor);
                                if (r11 != null)
                                {
                                    {
                                        var len = cursor.Location - startCursor3.Location;
                                        r8 = this.ReturnHelper<string>(startCursor3, ref cursor, state =>
                                            state.Subject.Substring(startCursor3.Location, len)
                                            );
                                    }
                                }
                                else
                                {
                                    cursor = startCursor3;
                                }
                            }
                            else
                            {
                                cursor = startCursor3;
                            }
                            if (r8 != null)
                            {
                                l0.Add(r8.Value);
                            }
                            else
                            {
                                break;
                            }
                        }
                        r7 = this.ReturnHelper<IList<string>>(startCursor2, ref cursor, state => l0.AsReadOnly());
                        if (r7 != null)
                        {
                            IParseResult<string> r12 = null;
                            r12 = this.Closing(ref cursor);
                            if (r12 != null)
                            {
                                r0 = this.ReturnHelper<MemberExpression>(startCursor1, ref cursor, state =>
                                    #line 11 "HandlebarsGrammar.peg"
                                                    { throw new HandlebarsSyntaxError("Malformed ModelToken. Syntax is: {{model MemberExpression}}", vStart.Line, vStart.Column); }
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor5 = cursor;
                IParseResult<IList<string>> r13 = null;
                var vStart = cursor;
                var startCursor6 = cursor;
                var l1 = new List<string>();
                while (true)
                {
                    IParseResult<string> r14 = null;
                    r14 = this.ParseAny(ref cursor);
                    if (r14 != null)
                    {
                        l1.Add(r14.Value);
                    }
                    else
                    {
                        break;
                    }
                }
                r13 = this.ReturnHelper<IList<string>>(startCursor6, ref cursor, state => l1.AsReadOnly());
                var vEnd = cursor;
                var v = ValueOrDefault(r13);
                if (r13 != null)
                {
                    r0 = this.ReturnHelper<MemberExpression>(startCursor5, ref cursor, state =>
                        #line 12 "HandlebarsGrammar.peg"
             { throw new HandlebarsSyntaxError("ModelToken is expected as first Token of a Handlebars-Template", vStart.Line, vStart.Column);}
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor5;
                }
            }
            return r0;
        }

        private IParseResult<IList<ASTElementBase>> Element(ref Cursor cursor)
        {
            IParseResult<IList<ASTElementBase>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<ASTElementBase>();
            while (true)
            {
                IParseResult<ASTElementBase> r1 = null;
                if (r1 == null)
                {
                    r1 = this.Node(ref cursor);
                }
                if (r1 == null)
                {
                    r1 = this.Token(ref cursor);
                }
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<ASTElementBase>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<
            #line 22 "HandlebarsGrammar.peg"
       ASTElementBase
            #line default
            > Token(ref Cursor cursor)
        {
            IParseResult<ASTElementBase> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, "{{");
                if (r1 != null)
                {
                    IParseResult<ASTElementBase> r2 = null;
                    var valueStart = cursor;
                    r2 = this.ASTLeaf(ref cursor);
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.ParseLiteral(ref cursor, "}}");
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<ASTElementBase>(startCursor0, ref cursor, state =>
                                #line 23 "HandlebarsGrammar.peg"
                                {value.SetTokenType(TokenType.Encoded); return value;}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.ParseLiteral(ref cursor, "{{{");
                if (r4 != null)
                {
                    IParseResult<ASTElementBase> r5 = null;
                    var valueStart = cursor;
                    r5 = this.ASTLeaf(ref cursor);
                    var valueEnd = cursor;
                    var value = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.ParseLiteral(ref cursor, "}}}");
                        if (r6 != null)
                        {
                            r0 = this.ReturnHelper<ASTElementBase>(startCursor1, ref cursor, state =>
                                #line 24 "HandlebarsGrammar.peg"
                                  {value.SetTokenType(TokenType.Encoded); return value;}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                r0 = this.MarkupLiteral(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 27 "HandlebarsGrammar.peg"
         ASTElementBase
            #line default
            > ASTLeaf(ref Cursor cursor)
        {
            IParseResult<ASTElementBase> r0 = null;
            r0 = this.YieldStatement(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 31 "HandlebarsGrammar.peg"
                YieldStatement
            #line default
            > YieldStatement(ref Cursor cursor)
        {
            IParseResult<YieldStatement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<MemberExpression> r1 = null;
            var valStart = cursor;
            r1 = this.MemberExpression(ref cursor);
            var valEnd = cursor;
            var val = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<YieldStatement>(startCursor0, ref cursor, state =>
                    #line 32 "HandlebarsGrammar.peg"
                            new YieldStatement(val,valStart.Line,valStart.Column)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 34 "HandlebarsGrammar.peg"
               MarkupLiteral
            #line default
            > MarkupLiteral(ref Cursor cursor)
        {
            IParseResult<MarkupLiteral> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var valueStart = cursor;
            var startCursor1 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r2 = null;
                var startCursor2 = cursor;
                IParseResult<string> r3 = null;
                var startCursor3 = cursor;
                IParseResult<string> r4 = null;
                r4 = this.Opening(ref cursor);
                if (r4 == null)
                {
                    r3 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor3;
                }
                if (r3 != null)
                {
                    IParseResult<string> r5 = null;
                    var startCursor4 = cursor;
                    IParseResult<string> r6 = null;
                    r6 = this.Closing(ref cursor);
                    if (r6 == null)
                    {
                        r5 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                    }
                    else
                    {
                        cursor = startCursor4;
                    }
                    if (r5 != null)
                    {
                        IParseResult<string> r7 = null;
                        r7 = this.ParseAny(ref cursor);
                        if (r7 != null)
                        {
                            {
                                var len = cursor.Location - startCursor2.Location;
                                r2 = this.ReturnHelper<string>(startCursor2, ref cursor, state =>
                                    state.Subject.Substring(startCursor2.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
                if (r2 != null)
                {
                    l0.Add(r2.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r1 = this.ReturnHelper<IList<string>>(startCursor1, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor1;
            }
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<MarkupLiteral>(startCursor0, ref cursor, state =>
                    #line 35 "HandlebarsGrammar.peg"
                                       new MarkupLiteral(string.Concat(value), valueStart.Line, valueStart.Column)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 42 "HandlebarsGrammar.peg"
      ASTElementBase
            #line default
            > Node(ref Cursor cursor)
        {
            IParseResult<ASTElementBase> r0 = null;
            r0 = this.WithBlock(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 45 "HandlebarsGrammar.peg"
           WithBlock
            #line default
            > WithBlock(ref Cursor cursor)
        {
            IParseResult<WithBlock> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<MemberExpression> r1 = null;
                var memberStart = cursor;
                r1 = this.WithOpeningToken(ref cursor);
                var memberEnd = cursor;
                var member = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<IList<ASTElementBase>> r2 = null;
                    var bodyStart = cursor;
                    r2 = this.BlockBody(ref cursor);
                    var bodyEnd = cursor;
                    var body = ValueOrDefault(r2);
                    if (r2 != null)
                    {
                        IParseResult<string> r3 = null;
                        r3 = this.WithClosingToken(ref cursor);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<WithBlock>(startCursor0, ref cursor, state =>
                                #line 46 "HandlebarsGrammar.peg"
                                                                new WithBlock(member, body, memberStart.Line, memberStart.Column )
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<MemberExpression> r4 = null;
                var memberStart = cursor;
                r4 = this.WithOpeningToken(ref cursor);
                var memberEnd = cursor;
                var member = ValueOrDefault(r4);
                if (r4 != null)
                {
                    IParseResult<IList<ASTElementBase>> r5 = null;
                    var bodyStart = cursor;
                    r5 = this.BlockBody(ref cursor);
                    var bodyEnd = cursor;
                    var body = ValueOrDefault(r5);
                    if (r5 != null)
                    {
                        r0 = this.ReturnHelper<WithBlock>(startCursor1, ref cursor, state =>
                            #line 47 "HandlebarsGrammar.peg"
                                              { throw new HandlebarsSyntaxError("Missing '{{/with}}' for {{#with}}", memberStart.Line, memberStart.Column); }
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 49 "HandlebarsGrammar.peg"
                  MemberExpression
            #line default
            > WithOpeningToken(ref Cursor cursor)
        {
            IParseResult<MemberExpression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.BlockOpeningIdentifier(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.WithKeyword(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<MemberExpression> r4 = null;
                        var valStart = cursor;
                        r4 = this.MemberExpression(ref cursor);
                        var valEnd = cursor;
                        var val = ValueOrDefault(r4);
                        if (r4 != null)
                        {
                            IParseResult<string> r5 = null;
                            r5 = this.ParseLiteral(ref cursor, "}}");
                            if (r5 != null)
                            {
                                r0 = this.ReturnHelper<MemberExpression>(startCursor0, ref cursor, state =>
                                    #line 50 "HandlebarsGrammar.peg"
                                                                          val
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor0;
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> WithClosingToken(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParseLiteral(ref cursor, "{{");
            if (r1 != null)
            {
                IParseResult<string> r2 = null;
                r2 = this.BlockClosingIdentifier(ref cursor);
                if (r2 != null)
                {
                    IParseResult<string> r3 = null;
                    r3 = this.WithKeyword(ref cursor);
                    if (r3 != null)
                    {
                        IParseResult<string> r4 = null;
                        r4 = this.ParseLiteral(ref cursor, "}}");
                        if (r4 != null)
                        {
                            {
                                var len = cursor.Location - startCursor0.Location;
                                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                                    state.Subject.Substring(startCursor0.Location, len)
                                    );
                            }
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<ASTElementBase>> BlockBody(ref Cursor cursor)
        {
            IParseResult<IList<ASTElementBase>> r0 = null;
            r0 = this.Element(ref cursor);
            return r0;
        }

        private IParseResult<
            #line 63 "HandlebarsGrammar.peg"
                  MemberExpression
            #line default
            > MemberExpression(ref Cursor cursor)
        {
            IParseResult<MemberExpression> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            r1 = this.Whitespace(ref cursor);
            if (r1 != null)
            {
                IParseResult<IdentifierElement> r2 = null;
                var valueStart = cursor;
                r2 = this.MemberPath(ref cursor);
                var valueEnd = cursor;
                var value = ValueOrDefault(r2);
                if (r2 != null)
                {
                    IParseResult<IList<string>> r3 = null;
                    r3 = this.Whitespace(ref cursor);
                    if (r3 != null)
                    {
                        r0 = this.ReturnHelper<MemberExpression>(startCursor0, ref cursor, state =>
                            #line 64 "HandlebarsGrammar.peg"
                                               new MemberExpression(value)
                            #line default
                            );
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IdentifierElement> MemberPath(ref Cursor cursor)
        {
            IParseResult<IdentifierElement> r0 = null;
            if (r0 == null)
            {
                r0 = this.NestedMemberIdentifier(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.MemberIdentifier(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 71 "HandlebarsGrammar.peg"
                  IdentifierElement
            #line default
            > MemberIdentifier(ref Cursor cursor)
        {
            IParseResult<IdentifierElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            var valueStart = cursor;
            r1 = this.NameIdentifier(ref cursor);
            var valueEnd = cursor;
            var value = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<IdentifierElement>(startCursor0, ref cursor, state =>
                    #line 72 "HandlebarsGrammar.peg"
                            new Identifier(value, null)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IdentifierElement> NestedMemberIdentifier(ref Cursor cursor)
        {
            IParseResult<IdentifierElement> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParentContextName(ref cursor);
            }
            if (r0 == null)
            {
                r0 = this.ChildContextName(ref cursor);
            }
            return r0;
        }

        private IParseResult<
            #line 78 "HandlebarsGrammar.peg"
                   IdentifierElement
            #line default
            > ParentContextName(ref Cursor cursor)
        {
            IParseResult<IdentifierElement> r0 = null;
            var startCursor0 = cursor;
            IParseResult<string> r1 = null;
            r1 = this.ParentPathLiteral(ref cursor);
            if (r1 != null)
            {
                IParseResult<IdentifierElement> r2 = null;
                var nextStart = cursor;
                r2 = this.MemberPath(ref cursor);
                var nextEnd = cursor;
                var next = ValueOrDefault(r2);
                if (r2 != null)
                {
                    r0 = this.ReturnHelper<IdentifierElement>(startCursor0, ref cursor, state =>
                        #line 79 "HandlebarsGrammar.peg"
                                         new PathUp(next)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<
            #line 81 "HandlebarsGrammar.peg"
                  IdentifierElement
            #line default
            > ChildContextName(ref Cursor cursor)
        {
            IParseResult<IdentifierElement> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                var valueStart = cursor;
                r1 = this.NameIdentifier(ref cursor);
                var valueEnd = cursor;
                var value = ValueOrDefault(r1);
                if (r1 != null)
                {
                    IParseResult<string> r2 = null;
                    r2 = this.NameDelimiter(ref cursor);
                    if (r2 != null)
                    {
                        IParseResult<IdentifierElement> r3 = null;
                        var nextStart = cursor;
                        r3 = this.MemberPath(ref cursor);
                        var nextEnd = cursor;
                        var next = ValueOrDefault(r3);
                        if (r3 != null)
                        {
                            r0 = this.ReturnHelper<IdentifierElement>(startCursor0, ref cursor, state =>
                                #line 82 "HandlebarsGrammar.peg"
                                                          new Identifier(value, next)
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor0;
                        }
                    }
                    else
                    {
                        cursor = startCursor0;
                    }
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r4 = null;
                var valueStart = cursor;
                r4 = this.NameIdentifier(ref cursor);
                var valueEnd = cursor;
                var value = ValueOrDefault(r4);
                if (r4 != null)
                {
                    IParseResult<string> r5 = null;
                    r5 = this.NameDelimiter(ref cursor);
                    if (r5 != null)
                    {
                        IParseResult<string> r6 = null;
                        r6 = this.NameDelimiter(ref cursor);
                        if (r6 != null)
                        {
                            IParseResult<string> r7 = null;
                            r7 = this.ParseAny(ref cursor);
                            if (r7 != null)
                            {
                                r0 = this.ReturnHelper<IdentifierElement>(startCursor1, ref cursor, state =>
                                    #line 84 "HandlebarsGrammar.peg"
       {throw new HandlebarsSyntaxError("Malformed MemberExpression: double identifier delimiter!", valueStart.Line, valueStart.Column);}
                                    #line default
                                    );
                            }
                            else
                            {
                                cursor = startCursor1;
                            }
                        }
                        else
                        {
                            cursor = startCursor1;
                        }
                    }
                    else
                    {
                        cursor = startCursor1;
                    }
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            if (r0 == null)
            {
                var startCursor2 = cursor;
                IParseResult<string> r8 = null;
                var valueStart = cursor;
                r8 = this.NameIdentifier(ref cursor);
                var valueEnd = cursor;
                var value = ValueOrDefault(r8);
                if (r8 != null)
                {
                    IParseResult<string> r9 = null;
                    r9 = this.NameDelimiter(ref cursor);
                    if (r9 != null)
                    {
                        IParseResult<string> r10 = null;
                        r10 = this.ParseAny(ref cursor);
                        if (r10 != null)
                        {
                            r0 = this.ReturnHelper<IdentifierElement>(startCursor2, ref cursor, state =>
                                #line 86 "HandlebarsGrammar.peg"
       {throw new HandlebarsSyntaxError("Malformed MemberExpression: identifier delimiter without subsequent identifier!", valueStart.Line, valueStart.Column);}
                                #line default
                                );
                        }
                        else
                        {
                            cursor = startCursor2;
                        }
                    }
                    else
                    {
                        cursor = startCursor2;
                    }
                }
                else
                {
                    cursor = startCursor2;
                }
            }
            return r0;
        }

        private IParseResult<
            #line 89 "HandlebarsGrammar.peg"
                string
            #line default
            > NameIdentifier(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            var startCursor0 = cursor;
            IParseResult<IList<string>> r1 = null;
            var valStart = cursor;
            r1 = this.Identifier(ref cursor);
            var valEnd = cursor;
            var val = ValueOrDefault(r1);
            if (r1 != null)
            {
                r0 = this.ReturnHelper<string>(startCursor0, ref cursor, state =>
                    #line 90 "HandlebarsGrammar.peg"
                      string.Concat(val)
                    #line default
                    );
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<IList<string>> Identifier(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseClass(ref cursor, "az", ignoreCase: true);
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            if (l0.Count >= 1)
            {
                r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            }
            else
            {
                cursor = startCursor0;
            }
            return r0;
        }

        private IParseResult<string> BlockOpeningIdentifier(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "#");
            return r0;
        }

        private IParseResult<string> BlockClosingIdentifier(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "/");
            return r0;
        }

        private IParseResult<string> WithKeyword(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "with");
            return r0;
        }

        private IParseResult<string> ModelKeyword(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "model");
            return r0;
        }

        private IParseResult<string> Opening(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "{{");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "{{{");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "{{{{");
            }
            return r0;
        }

        private IParseResult<string> Closing(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "}}");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "}}}");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "}}}}");
            }
            return r0;
        }

        private IParseResult<string> ParentPathLiteral(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            r0 = this.ParseLiteral(ref cursor, "../");
            return r0;
        }

        private IParseResult<string> NameDelimiter(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, ".");
            }
            if (r0 == null)
            {
                r0 = this.ParseLiteral(ref cursor, "/");
            }
            return r0;
        }

        private IParseResult<IList<string>> Whitespace(ref Cursor cursor)
        {
            IParseResult<IList<string>> r0 = null;
            var startCursor0 = cursor;
            var l0 = new List<string>();
            while (true)
            {
                IParseResult<string> r1 = null;
                r1 = this.ParseLiteral(ref cursor, " ");
                if (r1 != null)
                {
                    l0.Add(r1.Value);
                }
                else
                {
                    break;
                }
            }
            r0 = this.ReturnHelper<IList<string>>(startCursor0, ref cursor, state => l0.AsReadOnly());
            return r0;
        }

        private IParseResult<string> EOF(ref Cursor cursor)
        {
            IParseResult<string> r0 = null;
            if (r0 == null)
            {
                var startCursor0 = cursor;
                IParseResult<string> r1 = null;
                r1 = this.ParseAny(ref cursor);
                if (r1 == null)
                {
                    r0 = this.ReturnHelper<string>(cursor, ref cursor, state => string.Empty);
                }
                else
                {
                    cursor = startCursor0;
                }
            }
            if (r0 == null)
            {
                var startCursor1 = cursor;
                IParseResult<string> r2 = null;
                var cStart = cursor;
                r2 = this.ParseAny(ref cursor);
                var cEnd = cursor;
                var c = ValueOrDefault(r2);
                if (r2 != null)
                {
                    throw this.ExceptionHelper(startCursor1, state =>
                        #line 116 "HandlebarsGrammar.peg"
                string.Format("Line {0}; Column{1}: Unexpected character {2}", cStart.Line, cStart.Column ,c)
                        #line default
                        );
                }
                else
                {
                    cursor = startCursor1;
                }
            }
            return r0;
        }

        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false)
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor)
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr);
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode)
        {
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
